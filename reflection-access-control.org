#+TITLE: Splicing Should Respect Access Control
#+AUTHOR: Steve Downey
#+EMAIL: sdowney@gmail.com
#+LANGUAGE: en
#+DOCNUMBER: D3473R0
#+AUDIENCE: EWG, WG21
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+DATE: {{{modification-time(%Y-%m-%d, VC)}}}
#+SOURCE_REPO: https://github.com/steve-downey/wg21org
#+MACRO: filename (eval (magit-git-string "ls-files" ( buffer-file-name)))
#+source_file: {{{filename}}}
#+MACRO: gitver (eval (magit-git-string "describe" "--always" "--long" "--all" "--dirty" "--tags"))
#+source_version: {{{gitver}}}

#+STARTUP: showall

#+HTML_DOCTYPE: html5
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t
#+OPTIONS: ^:nil
#+OPTIONS: html-self-link-headlines:t

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./wg21org.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./modus-operandi-tinted.css"/>

#+BIBLIOGRAPHY: wg21.bib
#+BIBLIOGRAPHY: MyLibrary.bib

#+begin_abstract
Abstract: P2996 [cite:@P2996R5] ignores access control for member access splice. Member access control should always be respected.
#+end_abstract

* P2966 Splicing does not check access by design
#+begin_src C++
#include <experimental/meta>
#include <iostream>
#include <utility>

class S {
    int priv;
public:
    S() : priv(0) {}
};

consteval auto member_named(std::string_view name) {
  for (std::meta::info field : nonstatic_data_members_of(^S)) {
    if (has_identifier(field) && identifier_of(field) == name)
      return field;
  }
  std::unreachable();
}

int main() {
  S s;
  s.[:member_named("priv"):] = 42;
  return s.[:member_named("priv"):];
}
#+end_src
https://godbolt.org/z/6b1hf8631

This example is just slightly modified from an example in 3.3 of P2966. https://godbolt.org/z/MEPb78ece

#+begin_quote
Note that a “member access splice” like s.[:member_number(1):] is a more direct member access mechanism than the traditional syntax. It doesn’t involve member name lookup, access checking, or — if the spliced reflection value represents a member function — overload resolution.
#+end_quote


* Existing Examples of Access Violation

It has been argued that C++ has existing mechanisms for access control avoidance. One in particular was presented to me.

#+begin_src C++
class B {
    int priv;
  public:
    int get() {return priv;}
 };

int B::* get_private();

template <int B::* M>
struct Robber {
   friend int B::* get_private() { return M; };
};

template struct Robber<&B::priv>;

int main() {
    B b;
    b.*get_private() = 42;
    return b.get();
}
#+end_src
https://godbolt.org/z/eYvb97G91


Simplifying and making the mechanism less general, but possibly somewhat clearer:

#+begin_src C++
class B { int priv;};

struct Getter {
   typedef int B::*tag;
   friend tag get_private(Getter);
};

template <class T, typename T::tag M>
struct Robber {
   friend typename T::tag get_private(T) { return M; };
};

template struct Robber<Getter, &B::priv>;

int main() {
    B b;
    b.*get_private(Getter()) = 42;
    return b.*get_private(Getter());
}
#+end_src
https://godbolt.org/z/f9no48qK5

Access to the name B::priv to take its address is not checked when creating the explicit instantiation of Robber. This includes the instantiation of the friend function defined in the body of the template, ~get_private~, which has access to the template parameter object M, which holds the value of the member pointer to B::priv. Access control would normally apply to naming the type Robber<Getter, &B::priv>, but the friend function can be named without reference to the type that provided the definition. Access control is thereby skirted. The ~Getter~ type acts as a selection mechanism for overloads of ~get_private~, so that no access check is violated at the call site. The ~Robber~ type would not even need to be visible in the same TU.

I believe this is a defect, even if there is no clear point at which to fix the problem. I do not believe it was a design choice to allow general avoidance of access control.

* There are use cases for writing to private members
I believe these are not use cases that C++ should support. Deserialization is one that comes to mind, and it is an important tool, but it should be limited to contexts that have access to the members otherwise, through member functions of a type, or friends that the type declares.

There is no way to restrict a general facility for only good and approved purposes. Language mechanisms are neutral. The tools will be misused and useful mechanisms will have to be banned because of the potential for misuse. The programmer can not be trusted.

* Read access is not Safe
Even read access is not generally safe in a multithreaded environment, which is becoming more and more common. Reads from containers are unsafe, and usually undefined, in the face of any write operation. Reads from non-atomic data is also unsafe if the data is being written. Other laguanges mitigate this in various ways. Rust's type system makes read and write access safe. Java has monitors for classes and objects idiomatically used to control multithreaded access. C++ has no such conventions. This sort of bug is common today in ostream operators, of course, and in formatters. Making a formatter safe requires understanding of the type, and from the outside it will not be clear to a library what the required techniques are.

* Private names become part of API
The names of private data become part of the API of an object as changing them becomes a break in client code. Even without an ABI implication. Even if the client code can be changed, it increases the cost of any refactoring. Hyrum's Law gets a new tool to couple dependencies. That it is out of contract behavior, and that the implementor is entitled to break the code of the client, is of little use in practice.

* Allowing unchecked access is a fundemental change to C++
We have so far resisted the tempatation to deliberately provide tools to ignore access control.

We should contiue to do so.

* References
#+CITE_EXPORT: csl chicago-author-date.csl

#+PRINT_BIBLIOGRAPHY:

Exported: {{{time(%Y-%m-%d %T)}}}
