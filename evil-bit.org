#+TITLE: "RFC 3514: The Security Flag" for C++
#+AUTHOR: Steve Downey
#+EMAIL: sdowney@gmail.com
#+LANGUAGE: en
#+DOCNUMBER: P3514R0
#+AUDIENCE: LEWGI, WG21
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE: The Evil Bit
#+DATE: 2025-04-01
#+SOURCE_REPO: https://github.com/steve-downey/wg21org
#+MACRO: filename (eval (magit-git-string "ls-files" (buffer-file-name)))
#+source_file: {{{filename}}}
#+MACRO: gitver (eval (magit-git-string "describe" "--always" "--long" "--all" "--dirty" "--tags"))
#+source_version: {{{gitver}}}
#+MACRO: git-commit (eval magit-buffer-revision)
#+git_commit: {{{git-commit}}}

#+STARTUP: showall

#+HTML_DOCTYPE: html5
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t
#+OPTIONS: ^:nil
#+OPTIONS: html-self-link-headlines:t

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://sdowney.org/css/wg21org.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://sdowney.org/css/modus-operandi-tinted.css" />

#+BIBLIOGRAPHY: wg21.bib
#+BIBLIOGRAPHY: MyLibrary.bib
#+BIBLIOGRAPHY: rfc.bib

#+begin_abstract
Abstract: Compilers, interpreters, static analysis tools, and the like often have difficulty distinguishing between code that has malicious intent and code that is merely unusual. We define a security flag trait as a means of distinguishing the two cases. Prior art is established by [cite:@rfc3514].
#+end_abstract

* Introduction
Detecting and determining malicious intent is a difficult problem. To solve this, we require that code with malicious intent provide a specialization of a variable template that can be checked by a concept. Benign types will specialize the boolean variable template to false, which will also be the default, malicious types will specialize the template to be true.

The semantic constraint of /malicious intent/ means that code that is merely incorrect will be unaffected. Compilers may not infer malicious intent nor may they optimize based on such an inference. Compilers may not, on their own, create time travel paradoxes or put the existence of the timeline at risk.

Optimization based on the assertion of evil intent is, however, an open research question. Implementations SHOULD take care that programs containing evil code aer still translated correctly.

#+begin_quote
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [RFC2119][cite/n:@rfc2119] [RFC8174][cite/n:@rfc8174] when, and only when, they appear in all capitals, as shown here.
#+end_quote

* Comparison Table
#+begin_cmptbl
#+begin_cmptblcell before
*Before*
#+end_cmptblcell
#+begin_cmptblcell after
*After*
#+end_cmptblcell
#+begin_cmptblcell before
#+begin_src C++
template<typename T>
int meow(T t);
#+end_src
#+end_cmptblcell
#+begin_cmptblcell after
#+begin_src C++
template<typename T>
int meow(T t) requires !std::security::evil<T>;
#+end_src
#+end_cmptblcell
#+end_cmptbl

* Implementation
#+begin_src cpp
namespace security {
template< class T >
constexpr bool evil_bit = false;

template< class T >
concept evil = evil_bit<std::remove_cvref_t<T>>;
}
#+end_src

Note that as the evil bit is not a member of ~T~ the evil bit can be set externally to the type, in order support the marking of types that were implemented before the evil bit was standardized.

Malicious types that do not define ~evil_bit<T>~ to be true are IFNDR.

* Experience
The widespread adoption and improvements in Internet safety and security since RFC 3514 was proposed in 2003 speak for themselves.

* Wording
Based on [cite/title:@N4917]
** Add to [meta.type.synop]

#+begin_src cpp
namespace std::security {

  template<class T>
    constexpr bool evil_bit = false;

  template<class T>
    concept evil = /*see below*/;
}
#+end_src

** Add a new section [meta.security.evil]

#+begin_src cpp
template<class T>
  concept evil = evil_bit<remove_cvref_t<T>>;
#+end_src

Given a variable t of type T, T models ~evil~ if and only if the intent of the type is malicious.

#+begin_src cpp
template<class>
  constexpr bool evil_bit = false;
#+end_src

Remarks: Pursuant to ~[namespace.std]~, users may specialize ~evil_bit~ for cv-unqualified program-defined types. Such specializations shall be usable in constant expressions (~[expr.const]~) and have type ~const bool~.

** Feature-test macro [version.syn]
Add the following macro definition to [version.syn], header <version> synopsis, with the value selected by the editor to reflect the date of adoption of this paper:
#+begin_src cpp
#define __cpp_lib_evil_bit 20XXXXL
#+end_src
* Open Questions
- Should ~evil_bit~ be set for deprecated facilities?
- Should non-Unicode locales be marked ~evil~?
- Should ~std::regex~?

The proposed facility may have interactions with the in-flight proposals for profiles. [cite:@P3589R1;@P3608R0;@P3586R0;@P3543R0;@P3447R0;@P3446R0;@P3402R2;@P3274R0;@P3081R2] /et al./

This proposal places no requirements on any profiles paper and can be adopted independently of any proposal in this area.

Similarly, although it would be desirable for contract checks to not be ~evil~, this proposal places no requirements on mandating the lack of evil in contracts.
/Caveat lector./

* References
#+CITE_EXPORT: csl chicago-author-date.csl

#+PRINT_BIBLIOGRAPHY:

Exported: {{{time(%Y-%m-%d %T)}}}

#+MACRO: bloblink (eval (forge-get-url :blob (nth 1 (split-string (magit-git-string "ls-files" "-s" (buffer-file-name)))) (magit-git-string "ls-files" (buffer-file-name)) nil nil 't))
{{{bloblink}}}
